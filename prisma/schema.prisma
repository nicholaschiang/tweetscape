generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model annotations {
  tweet_id        BigInt
  normalized_text String
  probability     Decimal         @db.Decimal
  type            annotation_type
  start           Int
  end             Int
  tweets          tweets          @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, normalized_text])
}

model clusters {
  id         BigInt   @id
  name       String   @unique
  slug       String   @unique
  active     Boolean  @default(false)
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  visible    Boolean  @default(false)
  scores     scores[]
}

model links {
  url         String   @id
  display_url String
  status      Int?
  title       String?
  description String?
  unwound_url String?
  images      images[]
  urls        urls[]
}

model mentions {
  tweet_id BigInt
  user_id  BigInt
  start    Int
  end      Int
  tweets   tweets @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, user_id])
}

model refs {
  referenced_tweet_id                     BigInt
  referencer_tweet_id                     BigInt
  type                                    ref_type
  tweets_refs_referenced_tweet_idTotweets tweets   @relation("refs_referenced_tweet_idTotweets", fields: [referenced_tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tweets_refs_referencer_tweet_idTotweets tweets   @relation("refs_referencer_tweet_idTotweets", fields: [referencer_tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([referenced_tweet_id, referencer_tweet_id])
}

model scores {
  id                          BigInt   @id
  user_id                     BigInt
  cluster_id                  BigInt
  attention_score             Decimal  @db.Decimal
  attention_score_change_week Decimal? @db.Decimal
  insider_score               Decimal  @db.Decimal
  organization_rank           Int?
  personal_rank               Int?
  rank                        Int
  created_at                  DateTime @db.Timestamptz(6)
  clusters                    clusters @relation(fields: [cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([cluster_id, rank])
  @@unique([cluster_id, user_id])
}

model tags {
  tweet_id BigInt
  tag      String
  type     tag_type
  start    Int
  end      Int
  tweets   tweets   @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, tag, type])
}

model tweets {
  id                                    BigInt        @id
  author_id                             BigInt
  text                                  String
  retweet_count                         Int
  reply_count                           Int
  like_count                            Int
  quote_count                           Int
  created_at                            DateTime      @db.Timestamptz(6)
  users                                 users         @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  annotations                           annotations[]
  likes                                 likes[]
  mentions                              mentions[]
  refs_refs_referenced_tweet_idTotweets refs[]        @relation("refs_referenced_tweet_idTotweets")
  refs_refs_referencer_tweet_idTotweets refs[]        @relation("refs_referencer_tweet_idTotweets")
  retweets                              retweets[]
  tags                                  tags[]
  urls                                  urls[]
}

model urls {
  tweet_id BigInt
  link_url String
  start    Int
  end      Int
  links    links  @relation(fields: [link_url], references: [url], onDelete: NoAction, onUpdate: NoAction)
  tweets   tweets @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, link_url])
}

model images {
  link_url String
  url      String
  width    Int
  height   Int
  links    links  @relation(fields: [link_url], references: [url], onDelete: NoAction, onUpdate: NoAction)

  @@id([link_url, url, width, height])
}

model tokens {
  user_id       BigInt   @id
  token_type    String
  expires_in    Int
  access_token  String   @unique
  scope         String
  refresh_token String   @unique
  created_at    DateTime @db.Timestamptz(6)
  updated_at    DateTime @db.Timestamptz(6)
  users         users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lists {
  id             BigInt           @id
  owner_id       BigInt
  name           String
  description    String
  private        Boolean
  follower_count Int
  member_count   Int
  created_at     DateTime         @db.Timestamptz(6)
  users          users            @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  list_followers list_followers[]
  list_members   list_members[]
}

model list_followers {
  user_id BigInt
  list_id BigInt
  lists   lists  @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, list_id])
}

model list_members {
  user_id BigInt
  list_id BigInt
  lists   lists  @relation(fields: [list_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, list_id])
}

model likes {
  tweet_id BigInt
  user_id  BigInt
  tweets   tweets @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, user_id])
}

model retweets {
  tweet_id BigInt
  user_id  BigInt
  tweets   tweets @relation(fields: [tweet_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tweet_id, user_id])
}

model rekt {
  id                        BigInt @id
  user_id                   BigInt
  username                  String
  name                      String
  profile_image_url         String
  points                    Int
  rank                      Int    @unique
  followers_count           Int?
  followers_in_people_count Int
  users                     users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                BigInt           @id
  name              String
  username          String
  verified          Boolean?
  description       String?
  profile_image_url String?
  followers_count   Int?
  following_count   Int?
  tweets_count      Int?
  created_at        DateTime?        @db.Timestamptz(6)
  updated_at        DateTime?        @db.Timestamptz(6)
  likes             likes[]
  list_followers    list_followers[]
  list_members      list_members[]
  lists             lists[]
  mentions          mentions[]
  rekt              rekt[]
  retweets          retweets[]
  scores            scores[]
  tokens            tokens?
  tweets            tweets[]
}

enum annotation_type {
  Person
  Place
  Product
  Organization
  Other
}

enum ref_type {
  quoted
  retweeted
  replied_to
}

enum tag_type {
  cashtag
  hashtag
}
